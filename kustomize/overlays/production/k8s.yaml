apiVersion: v1
kind: Service
metadata:
  labels:
    app: argo-combined-app
  name: argo-combined-app
  namespace: production
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: argo-combined-app
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: argo-combined-app
  name: argo-combined-app-canary
  namespace: production
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: argo-combined-app
  type: ClusterIP
---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: argo-combined-app
  namespace: production
spec:
  args:
  - name: service-name
  metrics:
  - failureCondition: result[0] < 0.8
    failureLimit: 3
    interval: 10s
    name: success-rate
    provider:
      prometheus:
        address: http://prometheus-server.monitoring
        query: "sum(irate(\n  istio_requests_total{  \n    reporter=\"source\",\n
          \   destination_service=~\"{{args.service-name}}\",\n    response_code=~\"2.*\"\n
          \ }[2m]\n)) / sum(irate(\n  istio_requests_total{\n    reporter=\"source\",\n
          \   destination_service=~\"{{args.service-name}}\"\n  }[2m]\n))\n"
    successCondition: result[0] >= 0.8
  - failureCondition: result[0] > 1000
    failureLimit: 3
    interval: 10s
    name: avg-req-duration
    provider:
      prometheus:
        address: http://prometheus-server.monitoring
        query: |
          sum(irate(
            istio_request_duration_milliseconds_sum{
              reporter="source",
              destination_service=~"{{args.service-name}}"
            }[2m]
          )) / sum(irate(
            istio_request_duration_milliseconds_count{
              reporter="source",
              destination_service=~"{{args.service-name}}"
            }[2m]
          ))
    successCondition: result[0] <= 1000
---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  labels:
    app: argo-combined-app
  name: argo-combined-app
  namespace: production
spec:
  selector:
    matchLabels:
      app: argo-combined-app
  strategy:
    canary:
      analysis:
        args:
        - name: service-name
          value: argo-combined-app-canary.production.svc.cluster.local
        startingStep: 2
        templates:
        - templateName: argo-combined-app
      canaryService: argo-combined-app-canary
      stableService: argo-combined-app
      steps:
      - setWeight: 10
      - pause:
          duration: 2m
      - setWeight: 30
      - pause:
          duration: 30s
      - setWeight: 50
      - pause:
          duration: 30s
      trafficRouting:
        istio:
          virtualService:
            name: argo-combined-app
            routes:
            - primary
  template:
    metadata:
      labels:
        app: argo-combined-app
        istio-injection: enabled
    spec:
      containers:
      - image: sharief212/argo-combined-app
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: argo-combined-app
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /
            port: 80
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 80m
            memory: 128Mi
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app: argo-combined-app
  name: argo-combined-app
  namespace: production
spec:
  maxReplicas: 6
  minReplicas: 2
  scaleTargetRef:
    apiVersion: argoproj.io/v1alpha1
    kind: Rollout
    name: argo-combined-app
  targetCPUUtilizationPercentage: 80
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: argo-combined-app
  namespace: production
spec:
  selector:
    istio: ingressgateway
  servers:
  - hosts:
    - '*'
    port:
      name: http
      number: 80
      protocol: HTTP
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  labels:
    app: argo-combined-app
  name: argo-combined-app
  namespace: production
spec:
  gateways:
  - argo-combined-app
  hosts:
  - argo-combined-app.local
  - acme.com
  http:
  - name: primary
    route:
    - destination:
        host: argo-combined-app
        port:
          number: 80
      weight: 100
    - destination:
        host: argo-combined-app-canary
        port:
          number: 80
      weight: 0
